{"version":3,"sources":["components/TinyUrl.jsx","api/apiHandler.js","components/UrlForm.jsx","App.js","reportWebVitals.js","index.js"],"names":["TinyUrl","props","href","longUrl","target","shortUrl","service","axios","create","baseURL","process","errorHandler","error","response","data","console","log","url","post","then","res","catch","UrlForm","handleSubmit","event","a","preventDefault","apiHandler","setUrls","_id","onSubmit","htmlFor","type","id","name","onChange","value","App","state","key","setState","className","this","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAaeA,EAXC,SAACC,GACf,OACE,8CACa,IACX,mBAAGC,KAAMD,EAAME,QAASC,OAAO,SAA/B,SACGH,EAAMI,e,gCCLTC,E,OAAUC,EAAMC,OAAO,CACzBC,QAASC,gCAGb,SAASC,EAAaC,GAClB,GAAIA,EAAMC,SAASC,KAEf,MADAC,QAAQC,IAAIJ,EAAMC,UAAYD,EAAMC,SAASC,MACvCF,EAEV,MAAMA,EAGK,eAGHK,GACJ,OAAOX,EACFY,KAAK,eAAgBD,GACrBE,MAAK,SAACC,GAAD,OAASA,EAAIN,QAClBO,MAAMV,ICYJW,EA9BC,SAACrB,GACf,IAIMsB,EAAY,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DACnBD,EAAME,iBADa,kBAGAC,EAAmB,CAAExB,QAASF,EAAME,UAHpC,OAGbW,EAHa,OAIjBb,EAAM2B,QAAQ,WAAYd,EAAKe,KAJd,gDAMjBd,QAAQC,IAAR,MANiB,yDAAH,sDAUlB,OACE,uBAAMc,SAAUP,EAAhB,UACE,uBAAOQ,QAAQ,UAAf,iCACA,uBACEC,KAAK,OACLC,GAAG,UACHC,KAAK,UACLC,SArBe,SAACX,GACpBvB,EAAM2B,QAAQ,UAAWJ,EAAMpB,OAAOgC,QAqBlCA,MAAOnC,EAAME,UAEf,gDCASkC,E,4MAtBbC,MAAQ,CACNnC,QAAS,GACTE,SAAU,I,EAGZuB,QAAU,SAACW,EAAKH,GACd,EAAKI,SAAL,eACGD,EAAMH,K,4CAIX,WACE,OACE,sBAAKK,UAAU,MAAf,UACE,wDACA,cAAC,EAAD,CAASb,QAASc,KAAKd,QAASzB,QAASuC,KAAKJ,MAAMnC,UACpD,cAAC,EAAD,CAASA,QAASuC,KAAKJ,MAAMnC,QAASE,SAAUqC,KAAKJ,MAAMjC,kB,GAjBjDsC,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3B,MAAK,YAAkD,IAA/C4B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1dc67612.chunk.js","sourcesContent":["import React from \"react\";\n\nconst TinyUrl = (props) => {\n  return (\n    <span>\n      Tiny URL :{\" \"}\n      <a href={props.longUrl} target=\"_blank\">\n        {props.shortUrl}\n      </a>\n    </span>\n  );\n};\n\nexport default TinyUrl;\n","import axios from \"axios\";\n\nconst service = axios.create({\n    baseURL: process.env.REACT_APP_BACKEND_URL,\n});\n\nfunction errorHandler(error) {\n    if (error.response.data) {\n        console.log(error.response && error.response.data);\n        throw error;\n    }\n    throw error;\n}\n\nexport default {\n    service,\n\n    sendUrl(url) {\n        return service\n            .post(\"/api/saveurl\", url)\n            .then((res) => res.data)\n            .catch(errorHandler);\n    },\n};","import React from \"react\";\nimport apiHandler from \"../api/apiHandler\";\n\nconst UrlForm = (props) => {\n  const handleChange = (event) => {\n    props.setUrls(\"longUrl\", event.target.value);\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      let data = await apiHandler.sendUrl({ longUrl: props.longUrl });\n      props.setUrls(\"shortUrl\", data._id);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor=\"longUrl\">Paste your URL here</label>\n      <input\n        type=\"text\"\n        id=\"longUrl\"\n        name=\"longUrl\"\n        onChange={handleChange}\n        value={props.longUrl}\n      />\n      <button>Submit</button>\n    </form>\n  );\n};\n\nexport default UrlForm;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport TinyUrl from \"./components/TinyUrl\";\nimport UrlForm from \"./components/UrlForm\";\n\nclass App extends Component {\n  state = {\n    longUrl: \"\",\n    shortUrl: \"\",\n  };\n\n  setUrls = (key, value) => {\n    this.setState({\n      [key]: value,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1> Welcome to short URL </h1>\n        <UrlForm setUrls={this.setUrls} longUrl={this.state.longUrl} />\n        <TinyUrl longUrl={this.state.longUrl} shortUrl={this.state.shortUrl} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}